import type { Product, ProductCategory, ProductBrand, Country } from '../types';
import { safeParseFloat, safeParseInt } from './mathUtils';

/**
 * CSV utilities for importing and exporting product inventory
 */

// Expected CSV column order (from left to right)
const CSV_COLUMNS = [
  'name',
  'type', 
  'category',
  'brand',
  'country',
  'purchasePrice',
  'sellingPrice',
  'quantity'
] as const;

// Default values for missing data
const DEFAULT_VALUES = {
  type: 'TATA' as const,
  category: 'Others / Miscellaneous' as ProductCategory,
  brand: 'Other' as ProductBrand,
  country: 'India' as Country,
  purchasePrice: 0,
  sellingPrice: 0,
  quantity: 0
};

/**
 * Parse CSV content and convert to Product objects
 */
export const parseCSVToProducts = (csvContent: string): { products: Product[], errors: string[] } => {
  const errors: string[] = [];
  const products: Product[] = [];
  
  // Split into lines and remove empty lines
  const lines = csvContent.split('\n').filter(line => line.trim());
  
  if (lines.length === 0) {
    errors.push('CSV file is empty');
    return { products, errors };
  }
  
  // Skip header row if it exists
  const dataLines = lines[0].toLowerCase().includes('name') ? lines.slice(1) : lines;
  
  dataLines.forEach((line, index) => {
    try {
      // Parse CSV line (handle quoted values)
      const values = parseCSVLine(line);
      
      if (values.length < 5) {
        errors.push(`Row ${index + 1}: Insufficient data (need at least 5 columns)`);
        return;
      }
      
      // Map values to product fields
      const [name, type, category, brand, country, purchasePrice, sellingPrice, quantity] = values;
      
      // Validate required fields
      if (!name || name.trim() === '') {
        errors.push(`Row ${index + 1}: Product name is required`);
        return;
      }
      
      // Create product with defaults for missing values
      const product: Product = {
        id: '', // Will be generated by database service
        name: name.trim(),
        type: validateType(type) || DEFAULT_VALUES.type,
        category: validateCategory(category) || DEFAULT_VALUES.category,
        brand: validateBrand(brand) || DEFAULT_VALUES.brand,
        country: validateCountry(country) || DEFAULT_VALUES.country,
        purchasePrice: safeParseFloat(purchasePrice) || DEFAULT_VALUES.purchasePrice,
        sellingPrice: safeParseFloat(sellingPrice) || DEFAULT_VALUES.sellingPrice,
        quantity: safeParseInt(quantity) || DEFAULT_VALUES.quantity,
        pricing: {
          originalAmount: safeParseFloat(purchasePrice) || DEFAULT_VALUES.purchasePrice,
          currency: 'BDT',
          dutyPerUnit: 0,
          finalPurchasePrice: safeParseFloat(purchasePrice) || DEFAULT_VALUES.purchasePrice,
        }
      };
      
      products.push(product);
      
    } catch (error) {
      errors.push(`Row ${index + 1}: Invalid data format`);
    }
  });
  
  return { products, errors };
};

/**
 * Convert products to CSV format
 */
export const productsToCSV = (products: Product[]): string => {
  // Create header row
  const headers = CSV_COLUMNS.map(col => `"${col}"`).join(',');
  
  // Create data rows
  const rows = products.map(product => [
    `"${product.name}"`,
    `"${product.type}"`,
    `"${product.category}"`,
    `"${product.brand}"`,
    `"${product.country}"`,
    product.purchasePrice.toString(),
    product.sellingPrice.toString(),
    product.quantity.toString()
  ].join(','));
  
  return [headers, ...rows].join('\n');
};

/**
 * Parse a single CSV line, handling quoted values
 */
const parseCSVLine = (line: string): string[] => {
  const values: string[] = [];
  let current = '';
  let inQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    
    if (char === '"') {
      inQuotes = !inQuotes;
    } else if (char === ',' && !inQuotes) {
      values.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  
  // Add the last value
  values.push(current.trim());
  
  return values;
};

/**
 * Validation functions for product fields
 */
const validateType = (type: string): 'TATA' | 'Leyland' | 'Bedford' | 'Other' | null => {
  const validTypes = ['TATA', 'Leyland', 'Bedford', 'Other'];
  const normalized = type?.trim();
  return validTypes.includes(normalized) ? normalized as any : null;
};

const validateCategory = (category: string): ProductCategory | null => {
  const validCategories: ProductCategory[] = [
    'Clutch & Pressure',
    'Brake / Brake Lining',
    'Propeller Shaft',
    'Steering / Suspension',
    'Gears',
    'Pipes',
    'Bearings',
    'Water Pump',
    'Rubber Items / Mountings',
    'Electrical / Wiring / Switches',
    'Filter',
    'Compressor Head',
    'Cabin Parts / Brake Cabin',
    'Power Steering Pump',
    'Cable',
    'Control / Controller',
    'Horn',
    'Grease Gun',
    'Tools / Spanner / Hardware',
    'Layparts Items',
    'Others / Miscellaneous'
  ];
  
  const normalized = category?.trim();
  return validCategories.includes(normalized as ProductCategory) ? normalized as ProductCategory : null;
};

const validateBrand = (brand: string): ProductBrand | null => {
  const validBrands: ProductBrand[] = [
    'TARGET',
    'D.D',
    'Telco',
    'Luk',
    'LAP',
    'LIPE',
    'Eicher',
    'C/A',
    'S+B',
    'S+S',
    'MANISH',
    'ABC',
    'CALEX',
    'KMP',
    'DIN',
    'KKK',
    'BULL',
    'HARISH',
    'TVS',
    'Mahindra',
    'VICTOR',
    'NPN',
    'J---6',
    'LUCUS',
    'PAYEN',
    'KANSAI',
    'BOSS',
    'M.C.',
    'Layparts',
    'Prizol',
    'Daewoo',
    'MOD',
    'TKL',
    'Other'
  ];
  
  const normalized = brand?.trim();
  return validBrands.includes(normalized as ProductBrand) ? normalized as ProductBrand : null;
};

const validateCountry = (country: string): Country | null => {
  const validCountries: Country[] = ['India', 'China'];
  const normalized = country?.trim();
  return validCountries.includes(normalized as Country) ? normalized as Country : null;
};

/**
 * Download CSV file
 */
export const downloadCSV = (csvContent: string, filename: string): void => {
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  
  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}; 